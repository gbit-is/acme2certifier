name: CA handler tests - MicrosoftCA

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  msca_handler_tests:
    name: "msca_handler_tests"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # max-parallel: 1
      matrix:
        websrv: ['apache2']
        dbhandler: ['wsgi']
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "create folders"
      run: |
        mkdir lego
        mkdir acme-sh
        mkdir certbot

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV

    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Install dnsmasq"
      run: |
        sudo apt-get update
        sudo apt-get install -y dnsmasq
        sudo systemctl disable systemd-resolved
        sudo systemctl stop systemd-resolved
        sudo mkdir -p dnsmasq
        sudo cp .github/dnsmasq.conf dnsmasq/
        sudo chmod -R 777 dnsmasq/dnsmasq.conf
        sudo sed -i "s/RUNNER_IP/$RUNNER_IP/g" dnsmasq/dnsmasq.conf
        sudo echo "address=/$WCCE_FQDN/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        sudo echo "address=/$WCCE_ADS_DOMAIN/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        sudo echo "address=/$WES_HOST/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        cat dnsmasq/dnsmasq.conf
        sudo cp dnsmasq/dnsmasq.conf /etc/
        sudo systemctl enable dnsmasq
        sudo systemctl start dnsmasq
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WES_HOST: ${{ secrets.WES_HOST }}

    - name: "[ PREPARE ] test dns resulution"
      run: |
        host $WCCE_ADS_DOMAIN 127.0.0.1
        host $WCCE_FQDN 127.0.0.1
        host $WES_HOST 127.0.0.1
      env:
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WES_HOST: ${{ secrets.WES_HOST }}

    - name: "Build docker-compose (${{ matrix.websrv }}_${{ matrix.dbhandler }})"
      working-directory: examples/Docker/
      run: |
        sudo mkdir -p data
        sed -i "s/wsgi/$DB_HANDLER/g" .env
        sed -i "s/apache2/$WEB_SRV/g" .env
        cat .env
        docker network create acme
        docker-compose up -d
        docker-compose logs
      env:
        WEB_SRV: ${{ matrix.websrv }}
        DB_HANDLER: ${{ matrix.dbhandler }}

    - name: "Prepare acme.sh container"
      run: |
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest daemon

    - name: "Prepare ssh environment on ramdisk "
      run: |
        sudo mkdir -p /tmp/rd
        sudo mount -t tmpfs -o size=5M none /tmp/rd
        sudo echo "$SSH_KEY" > /tmp/rd/ak.tmp
        sudo chmod 600 /tmp/rd/ak.tmp
        sudo echo "$KNOWN_HOSTS" > /tmp/rd/known_hosts
      env:
        SSH_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}

    - name: "Establish SSH connection"
      run: sudo ssh $SSH_USER@$SSH_HOST -fN -i /tmp/rd/ak.tmp -p $SSH_PORT -o UserKnownHostsFile=/tmp/rd/known_hosts -L 445:$WCCE_HOST:445 -L 88:$WCCE_HOST:88 -L 443:$WES_IP:443 -g
      env:
        SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WES_IP: ${{ secrets.WES_IP }}
        CMP_HOST: ${{ secrets.CMP_HOST }}

    - name: "Setup a2c with mscertsrv_ca_handler"
      run: |
        sudo cp .github/acme2certifier.pem examples/Docker/data/acme2certifier.pem
        sudo cp .github/acme2certifier_cert.pem examples/Docker/data/acme2certifier_cert.pem
        sudo cp .github/acme2certifier_key.pem examples/Docker/data/acme2certifier_key.pem
        sudo cp .github/django_settings.py examples/Docker/data/settings.py
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo cp test/ca/certsrv_ca_certs.pem examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/mscertsrv_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $WES_HOST" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WES_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WES_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "auth_method: ntlm" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WES_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "krb5_config: volume/krb5.conf" >> examples/Docker/data/acme_srv.cfg
        sudo echo "WCCE_HOST: $WCCE_HOST" >> examples/Docker/data/acme_srv.cfg

        sudo echo "request_timeout: 30" >> examples/Docker/data/acme_srv.cfg
        sudo echo "WCCE_ADS_DOMAIN: $WCCE_ADS_DOMAIN" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nheader_info_list: [\"HTTP_USER_AGENT\"]/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg

        sudo touch examples/Docker/data/krb5.conf
        sudo chmod 777 examples/Docker/data/krb5.conf
        cat <<EOF > examples/Docker/data/krb5.conf
        $WES_KRB5_CONF
        EOF

        cd examples/Docker/
        docker-compose restart
        docker-compose logs
        exit 1
      env:
        WES_HOST: ${{ secrets.WES_HOST }}
        WES_USER: ${{ secrets.WES_USER }}
        WES_PASSWORD: ${{ secrets.WES_PASSWORD }}
        WES_TEMPLATE: ${{ secrets.WES_TEMPLATE }}
        WES_AUTHMETHOD: ${{ secrets.WES_AUTHMETHOD }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WES_KRB5_CONF: ${{ secrets.WES_KRB5_CONF }}


    - name: "Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "Test if https://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory

    - name: "Register certbot"
      run: |
        sudo rm -rf certbot/
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email

    - name: "Enroll lego with template in acme_srv.cfg (WebServer)"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"

    - name: "Enroll acme.sh with template in acme_srv.cfg (WebServer)"
      run: |
        sudo rm -rf acme-sh/
        docker restart acme-sh
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
        openssl x509 -in acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"

    - name: "Enroll lego with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf lego/
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --user-agent template=WebServerModified --key-type=rsa2048 -d lego.acme --http run
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "Enroll acme.sh with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf acme-sh/
        docker restart acme-sh
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --keylength 2048 --issue -d acme-sh.acme --alpn --standalone --useragent template=WebServerModified --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.acme/acme-sh.acme.cer
        openssl x509 -in acme-sh/acme-sh.acme/acme-sh.acme.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "Enroll acme.sh with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf acme-sh/
        docker restart acme-sh
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --keylength 2048 --issue -d acme-sh.acme --alpn --standalone --useragent template=WebServerModified --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.acme/acme-sh.acme.cer
        openssl x509 -in acme-sh/acme-sh.acme/acme-sh.acme.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo cp -rp certbot/ ${{ github.workspace }}/artifact/certbot/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        sudo cp -rp dnsmasq/ ${{ github.workspace }}/artifact/dnsmasq/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data acme-sh certbot lego dnsmasq

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: msca-${{ matrix.websrv }}-${{ matrix.dbhandler }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  msca_handler_tests_rpm:
    name: "msca_handler_tests_rpm"
    runs-on: ubuntu-latest
    strategy:
      # max-parallel: 1
      fail-fast: false
      matrix:
        rhversion: [9]
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV

    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Install dnsmasq"
      run: |
        sudo apt-get update
        sudo apt-get install -y dnsmasq
        sudo systemctl disable systemd-resolved
        sudo systemctl stop systemd-resolved
        # sudo chmod -R 777 /etc/resolv.conf
        # sudo echo "nameserver 8.8.8.8" > /etc/resolv.conf
        sudo mkdir -p dnsmasq
        sudo cp .github/dnsmasq.conf dnsmasq/
        sudo chmod -R 777 dnsmasq/dnsmasq.conf
        sudo sed -i "s/RUNNER_IP/$RUNNER_IP/g" dnsmasq/dnsmasq.conf
        sudo echo "address=/$WCCE_FQDN/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        sudo echo "address=/$WCCE_ADS_DOMAIN/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        sudo echo "address=/$WES_HOST/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        cat dnsmasq/dnsmasq.conf
        sudo cp dnsmasq/dnsmasq.conf /etc/
        sudo sed -i "s/ --local-service/ /g" /etc/init.d/dnsmasq
        sudo systemctl enable dnsmasq
        sudo systemctl start dnsmasq
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WES_HOST: ${{ secrets.WES_HOST }}

    - name: "Test dns resulution"
      run: |
        host $WCCE_ADS_DOMAIN ${{ env.RUNNER_IP }}
        host $WCCE_FQDN ${{ env.RUNNER_IP }}
        host $WES_HOST 127.0.0.1
      env:
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WES_HOST: ${{ secrets.WES_HOST }}

    - name: Retrieve Version from version.py
      run: |
        echo TAG_NAME=$(cat acme_srv/version.py | grep -i __version__ | head -n 1 | sed 's/__version__ = //g' | sed s/\'//g) >> $GITHUB_ENV

    - run: echo "Latest tag is ${{ env.TAG_NAME }}"

    - name: update version number in spec file
      run: |
        # sudo sed -i "s/Source0:.*/Source0:        %{name}-%{version}.tar.gz/g" examples/install_scripts/rpm/acme2certifier.spec
        sudo sed -i "s/__version__/${{ env.TAG_NAME }}/g" examples/install_scripts/rpm/acme2certifier.spec
        cat examples/install_scripts/rpm/acme2certifier.spec

    - name: build RPM package
      id: rpm
      uses: grindsa/rpmbuild@alma9
      with:
        spec_file: "examples/install_scripts/rpm/acme2certifier.spec"

    - run: echo "path is ${{ steps.rpm.outputs.rpm_dir_path }}"

    - name: "Setup environment for alma installation"
      run: |
        docker network create acme
        sudo mkdir -p data
        sudo chmod -R 777 data
        sudo cp ${{ steps.rpm.outputs.rpm_dir_path }}noarch/acme2certifier-${{ env.TAG_NAME }}-1.0.noarch.rpm data
        sudo cp examples/Docker/almalinux-systemd/rpm_tester.sh data

    - name: "Retrieve rpms from SBOM repo"
      run: |
        git clone https://$GH_SBOM_USER:$GH_SBOM_TOKEN@github.com/$GH_SBOM_USER/sbom /tmp/sbom
        cp /tmp/sbom/rpm-repo/RPMs/rhel${{ matrix.rhversion }}/*.rpm  data
      env:
        GH_SBOM_USER: ${{ secrets.GH_SBOM_USER }}
        GH_SBOM_TOKEN: ${{ secrets.GH_SBOM_TOKEN }}

    - name: "Prepare Almalinux instance"
      run: |
        sudo cp examples/Docker/almalinux-systemd/Dockerfile data
        sudo sed -i "s/FROM almalinux:9/FROM almalinux:${{ matrix.rhversion }}/g" data/Dockerfile
        cat data/Dockerfile | docker build -t almalinux-systemd -f - . --no-cache
        docker run -d -id --privileged --network acme --name=acme-srv -v "$(pwd)/data":/tmp/acme2certifier almalinux-systemd

    - name: "Create letsencrypt and lego folder"
      run: |
        mkdir certbot
        mkdir lego
        mkdir acme-sh

    - name: "Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/rpm_tester.sh

    - name: "Prepare ssh environment on ramdisk "
      run: |
        sudo mkdir -p /tmp/rd
        sudo mount -t tmpfs -o size=5M none /tmp/rd
        sudo echo "$SSH_KEY" > /tmp/rd/ak.tmp
        sudo chmod 600 /tmp/rd/ak.tmp
        sudo echo "$KNOWN_HOSTS" > /tmp/rd/known_hosts
      env:
        SSH_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}

    - name: "Establish SSH connection"
      run: sudo ssh $SSH_USER@$SSH_HOST -fN -i /tmp/rd/ak.tmp -p $SSH_PORT -o UserKnownHostsFile=/tmp/rd/known_hosts -L 445:$WCCE_HOST:445 -L 88:$WCCE_HOST:88 -L 443:$WES_IP:443 -g
      env:
        SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WES_IP: ${{ secrets.WES_IP }}
        CMP_HOST: ${{ secrets.CMP_HOST }}

    - name: "Sleep for 5s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 5s

    - name: "Setup a2c with mscertsrv_ca_handler"
      run: |
        mkdir -p data/acme_ca
        sudo cp test/ca/certsrv_ca_certs.pem data/acme_ca/ca_certs.pem
        sudo touch data/acme_srv.cfg
        sudo chmod 777 data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/acme_srv.cfg
        sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/mscertsrv_ca_handler.py" >> data/acme_srv.cfg
        sudo echo "host: $WES_HOST" >> data/acme_srv.cfg
        sudo echo "user: $WES_USER" >> data/acme_srv.cfg
        sudo echo "password: $WES_PASSWORD" >> data/acme_srv.cfg
        # sudo echo "auth_method: $WES_AUTHMETHOD" >> data/acme_srv.cfg
        sudo echo "auth_method: ntlm" >> data/acme_srv.cfg
        sudo echo "template: $WES_TEMPLATE" >> data/acme_srv.cfg
        sudo echo "ca_bundle: volume/acme_ca/ca_certs.pem" >> data/acme_srv.cfg
        sudo echo "request_timeout: 30" >> data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nheader_info_list: [\"HTTP_USER_AGENT\"]/g" data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" data/acme_srv.cfg
      env:
        WES_HOST: ${{ secrets.WES_HOST }}
        WES_USER: ${{ secrets.WES_USER }}
        WES_PASSWORD: ${{ secrets.WES_PASSWORD }}
        WES_AUTHMETHOD: ${{ secrets.WES_AUTHMETHOD }}
        WES_TEMPLATE: ${{ secrets.WES_TEMPLATE }}

    - name: "Reconfigure a2c "
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/rpm_tester.sh restart

    - name: "Sleep for 5s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 5s

    - name: "Test http://acme-srv/directory is accessable "
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "Register certbot"
      run: |
        sudo rm -rf certbot/
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email

    - name: "Enroll lego with template in acme_srv.cfg (WebServer)"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        sudo openssl verify -CAfile data/acme_ca/ca_certs.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"

    - name: "Enroll acme.sh with template in acme_srv.cfg (WebServer)"
      run: |
        sudo rm -rf acme-sh/
        docker restart acme-sh
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile data/acme_ca/ca_certs.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
        openssl x509 -in acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"

    - name: "Enroll lego with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf lego/
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --user-agent template=WebServerModified --key-type=rsa2048 -d lego.acme --http run
        sudo openssl verify -CAfile data/acme_ca/ca_certs.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "Enroll acme.sh with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf acme-sh/
        docker restart acme-sh
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --keylength 2048 --issue -d acme-sh.acme --alpn --standalone --useragent template=WebServerModified --debug 3 --output-insecure --force
        openssl verify -CAfile data/acme_ca/ca_certs.pem acme-sh/acme-sh.acme/acme-sh.acme.cer
        openssl x509 -in acme-sh/acme-sh.acme/acme-sh.acme.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "Enroll acme.sh with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf acme-sh/
        docker restart acme-sh
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --keylength 2048 --issue -d acme-sh.acme --alpn --standalone --useragent template=WebServerModified --debug 3 --output-insecure --force
        openssl verify -CAfile data/acme_ca/ca_certs.pem acme-sh/acme-sh.acme/acme-sh.acme.cer
        openssl x509 -in acme-sh/acme-sh.acme/acme-sh.acme.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        sudo rm -rf data/*.rpm
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo cp -rp dnsmasq/ ${{ github.workspace }}/artifact/dnsmasq/
        # docker exec acme-srv cat /etc/nginx/nginx.conf.orig > ${{ github.workspace }}/artifact/data/nginx.conf.orig
        # docker exec acme-srv cat /etc/nginx/nginx.conf > ${{ github.workspace }}/artifact/data/nginx.conf
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log acme-sh dnsmasq

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: msca_handler_tests_rpm-rh${{ matrix.rhversion }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/